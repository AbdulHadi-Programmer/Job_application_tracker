CRUD Operations Overview:
- Create: Adds new data to the database.
- Read: Retrieve data from the database.
- Update: Modifies existing data in the database.
- Delete: Removes data from the database.

------------------------------------------------------------------------------------------------------------------------------------------
**1. Create Operation (Create)**
To create new data in the database, we typically use the create() method or instantiate an object and save it.
* Example using Django:
- Let's say you have a User model with username, email, and password fields.

- from myapp.models import User
- # Method 1: Using create() method
- user = User.objects.create(username="john_doe", email="john@example.com", password="password123")
- 
- # Method 2: Creating an instance and saving it
- user = User(username="jane_doe", email="jane@example.com", password="password456")
- user.save()  # Save to the database

. create(): This is a one-step method to create and save an object to the database. It automatically calls save() in the background.
. save(): This method is used when you want to first instantiate an object and later save it to the database.

**-- 1.Create with bulk_create():**
If you want to insert multiple records at once, you can use bulk_create() to avoid multiple database hits.

users = [
    User(username="alice", email="alice@example.com", password="pass1"),
    User(username="bob", email="bob@example.com", password="pass2")
]
User.objects.bulk_create(users)

-----------------------------------------------------------------------------------------------------------------------------------------
**2. Read Operation (Read)**
- The Read operation is used to fetch data from the database. Django provides various methods to read data:

# Examples using Django:
- Getting All Objects:
 - 1. Get all users
      users = User.objects.all()
 - 2. Filtering Data:
      You can filter records using filter(), exclude(), or get() methods.

      # Get users with username 'john_doe'
      user = User.objects.get(username="john_doe")

      # Get all users whose email contains 'example'
      users = User.objects.filter(email__contains="example")

      # Get all users except those whose username is 'john_doe'
      users = User.objects.exclude(username="john_doe")

  **- 3. Querying with filter() and get():**
  - filter(): Returns a queryset (list-like object) of objects that match the query.
  - get(): Returns a single object (raises an exception if thereâ€™s no match or multiple matches).
 
  # Filter users with a specific email domain
  users = User.objects.filter(email__endswith="@example.com")

  # Get a single user by username (throws DoesNotExist if not found)
  user = User.objects.get(username="jane_doe")

  **4. Selecting Specific Fields: You can optimize queries to retrieve only specific fields using only() or values().**
  # Get only the 'username' and 'email' fields
  users = User.objects.only('username', 'email')

  # Get a list of dictionaries (with specific fields)
  user_data = User.objects.values('username', 'email')

  Getting the First or Last Object: 
  # Get the first user
  user = User.objects.first()

  # Get the last user
  user = User.objects.last()

------------------------------------------------------------------------------------------------------------------------------
3. Update Operation (Update)
To modify an existing record in the database, you can use the update() method or modify an object and call save().

Examples using Django:
- 1.Updating Single Fields:
  # Update a user's email
  user = User.objects.get(username="john_doe")
  user.email = "new_email@example.com"
  user.save()  # Save the updated object
  Using update() for Bulk Updates:

- 2. Using update() for Bulk Updates:
  You can update multiple records at once using update() on a queryset.

  # Update all users' emails to 'admin@example.com'
  User.objects.all().update(email="admin@example.com")

- 3. Updating with F() expressions:
  F() expressions allow you to update a field based on its current value.

  from django.db.models import F
  
  # Increment the age of all users by 1 year
  User.objects.update(age=F('age') + 1)

- 4. Partial Updates:
  When you call save(), Django will update the fields that have changed. If you want to update only specific fields, you can pass the update_fields argument.

  user = User.objects.get(username="john_doe")
  user.email = "updated_email@example.com"
  user.save(update_fields=['email'])  # Only update the email field
-----------------------------------------------------------------------------------------------------------------------------

4. Delete Operation (Delete)
To remove a record from the database, you can use the delete() method.

Examples using Django:
- 1. Deleting a Single Object:

  # Delete a specific user 
  user = User.objects.get(username="john_doe")
  user.delete()

- 2. Deleting Multiple Objects: You can delete multiple records at once by filtering a queryset.

  # Delete all users with a specific email domain
  User.objects.filter(email__endswith="@example.com").delete()

- 3. Deleting All Objects in a Model:

  # Delete all users
  User.objects.all().delete()
--------------------------------------------------------------------------------------------------------------------------------

--> CRUD Example for a Django View
Let's implement a simple Django view that supports CRUD operations for a User model.

-> models.py:
from django.db import models

class User(models.Model):
    username = models.CharField(max_length=100)
    email = models.EmailField()
    password = models.CharField(max_length=255)

    def __str__(self):
        return self.username

-> views.py:
from django.shortcuts import render, redirect
from .models import User

# Create: Add a new user
def create_user(request):
    if request.method == 'POST':
        username = request.POST['username']
        email = request.POST['email']
        password = request.POST['password']
        user = User.objects.create(username=username, email=email, password=password)
        return redirect('user_list')
    return render(request, 'create_user.html')

# Read: Display list of users
def user_list(request):
    users = User.objects.all()
    return render(request, 'user_list.html', {'users': users})

# Update: Edit an existing user
def update_user(request, user_id):
    user = User.objects.get(id=user_id)
    if request.method == 'POST':
        user.username = request.POST['username']
        user.email = request.POST['email']
        user.password = request.POST['password']
        user.save()
        return redirect('user_list')
    return render(request, 'update_user.html', {'user': user})

# Delete: Remove a user
def delete_user(request, user_id):
    user = User.objects.get(id=user_id)
    user.delete()
    return redirect('user_list')

URLs (urls.py):
python
Copy code
from django.urls import path
from . import views

urlpatterns = [
    path('users/', views.user_list, name='user_list'),
    path('user/create/', views.create_user, name='create_user'),
    path('user/update/<int:user_id>/', views.update_user, name='update_user'),
    path('user/delete/<int:user_id>/', views.delete_user, name='delete_user'),
]

---------------------------------------------------------------------------------------------------------------------------
Summary of CRUD Methods in Django:
Operation	Method	                           Description
Create	User.objects.create()	        Create a new instance and save it.
Read	User.objects.all()	        Get all objects.
Read	User.objects.get()	        Get a single object by primary key or unique field.
Read	User.objects.filter()	        Get a list of objects based on a query.
Update	User.objects.update()	        Update fields in a queryset.
Update	instance.save()	                Update an individual instance (saves the modified object).
Delete	instance.delete()	        Delete a single instance.
Delete	User.objects.filter().delete()	Delete multiple objects based on a query.


