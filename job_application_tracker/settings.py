"""
Django settings for job_application_tracker project.

Generated by 'django-admin startproject' using Django 4.1.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# LOGIN_URL = 'login'

LOGIN_URL = '/auth/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/auth/login/'

SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Default session engine
SESSION_COOKIE_AGE = 1209600  # Two weeks (in seconds)

# AUTH_USER_MODEL = 'tracker.User'  # Adjust according to your app name and model name
# AUTH_USER_MODEL = 'tracker.CustomUser'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*zy$9ahx^-q$fp9fb#m-_%g0fozpv(f(r1u!#n-9h7j-*=b-wa'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
# ALLOWED_HOSTS = ['*']

# CSRF_TRUSTED_ORIGINS = ['192.168.2.104']
# ALLOWED_HOSTS = ['localhost', '127.0.0.1', '192.168.2.104']
# ALLOWED_HOSTS = ['192.168.2.104', 'localhost', '127.0.0.1'] # home
# ALLOWED_HOSTS = ['192.168.2.108', '127.0.0.1', 'localhost']  
# ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '0.0.0.0']   

# ALLOWED_HOSTS = ['192.168.100.176', 'localhost', '127.0.0.1'] # library
# ALLOWED_HOSTS = ['192.168.23.148', 'localhost', '127.0.0.1']  # Redmi 12 C phone

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Application definition
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:8000",    
#     "http://192.168.2.103",
    # "http://192.168.100.176",  # Adjust this to match your IP/domain
    # "http://192.168.2.106",  # Adjust this to match your IP/domain
# ]

# ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '192.168.2.106']   # Home Wifi
# ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '192.168.1.111']   # Muhammad Home Wifi
# ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '192.168.57.148']  # Mobile hostpot
# ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '192.168.100.176']   # Library Wifi
# ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '192.168.2.103']   # Computer Table Wifi
ALLOWED_HOSTS = ["*"]     # Allow all host 


X_FRAME_OPTIONS = 'ALLOWALL'


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tracker',
    'corsheaders',
    'authentication',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',   
    'corsheaders.middleware.CorsMiddleware',    
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

ROOT_URLCONF = 'job_application_tracker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # This is written to set the template folder
        # 'DIRS': [BASE_DIR / 'templates'], # This is written to set the template folder
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'job_application_tracker.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            'timeout': 20,  # Increase timeout to 20 seconds
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Karachi'

USE_I18N = True

USE_TZ = True

# settings.py

# import logging

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'DEBUG',
#         },
#     },
# }


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'staticfiles/'
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'staticfiles'),
# ]
# STATICFILES_DIRS = [
#     BASE_DIR / "static",  # Directory where your static files live (other than the app's static directories)
# ]

STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

## Email: 
# Email settings (use your email provider's details)

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
# DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

# python decouple library is perfectly working and it is used to get and store .env var so we can keep our api aur secret key even more secure
# from decouple import config
from dotenv import load_dotenv
import os

load_dotenv()

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

# print("EMAIL_HOST_USER:", os.getenv('EMAIL_HOST_USER'))
# print("EMAIL_HOST_PASSWORD:", os.getenv('EMAIL_HOST_PASSWORD'))

# EMAIL_HOST_USER = config('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
# DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = config('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
# DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')

import os

if os.path.exists('.env'):
    print("The .env file was found.")
else:
    print("The .env file was NOT found.")

# print("EMAIL_HOST_USER:", config('EMAIL_HOST_USER', default='Variable not set'))
# print("EMAIL_HOST_PASSWORD:", config('EMAIL_HOST_PASSWORD', default='Variable not set'))
# print("DEFAULT_FROM_EMAIL:", config('DEFAULT_FROM_EMAIL', default='Variable not set'))

# # Debugging output
# print("DEBUGGING OUTPUT:")
# print("EMAIL_HOST_USER:", config('EMAIL_HOST_USER', default='Variable not set'))
# print("EMAIL_HOST_PASSWORD:", config('EMAIL_HOST_PASSWORD', default='Variable not set'))
# print("DEFAULT_FROM_EMAIL:", config('DEFAULT_FROM_EMAIL', default='Variable not set'))


# print("EMAIL_HOST_USER:", os.getenv('EMAIL_HOST_USER'))
# print("EMAIL_HOST_PASSWORD:", os.getenv('EMAIL_HOST_PASSWORD'))
# print("DEFAULT_FROM_EMAIL:", os.getenv('DEFAULT_FROM_EMAIL'))
# print("EMAIL_HOST_USER:", os.environ.get('EMAIL_HOST_USER'))
# print("EMAIL_HOST_PASSWORD:", os.environ.get('EMAIL_HOST_PASSWORD'))
# print("DEFAULT_FROM_EMAIL:", os.environ.get('DEFAULT_FROM_EMAIL'))

# This is how to get and save env 
# save the imp var in .env file 
# and os.getenv('variable') is used to get the specific var from .env

# import python decouple library and import decouple 
# and then use config(env_varName)
